<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Quantum Cryptosystem Secure From Third-Party Interference on Tanishka Mehta</title>
    <link>https://tanishkamehta.github.io/researchWebsite/</link>
    <description>Recent content in A Quantum Cryptosystem Secure From Third-Party Interference on Tanishka Mehta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Nov 2021 10:58:08 -0400</lastBuildDate><atom:link href="https://tanishkamehta.github.io/researchWebsite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#7: Quarter 2 Update - Researchers &amp; Articles</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress7/</link>
      <pubDate>Tue, 23 Nov 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress7/</guid>
      <description>To gain more insight and guidance on the project, researchers were also contacted. The link below contains information about the researchers that were contacted, as well as major details about each meeting.
Researcher Contact Information
Moreover, articles were also researched to gain more knowledge on the next step of the project: determining whether eavesdroppers are present in the system and are reading the transmitted information.
 Article 1:
Quantum Secret Sharing with Polarization-Entangled Photon Pairs</description>
    </item>
    
    <item>
      <title>#6: Quarter 2 Update - Normalization of Qubits</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress6/</link>
      <pubDate>Mon, 22 Nov 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress6/</guid>
      <description>After encryption was completed during Quarter 1, the next step was to determine whether the 2 qubits being compared were normalized, or equal. Since the qubit values cannot be compared directly, since they will collapse into bits and lose their quantum information, a normalization formula was used.
The formula for determining if two qubits are normalized is seen below, where the numerator calculates the direction of the qubits and the denominator of the fraction in the formula calculates the magnitude of the vectors.</description>
    </item>
    
    <item>
      <title>#5: Quarter 1 Update - Encryption</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress5/</link>
      <pubDate>Wed, 27 Oct 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress5/</guid>
      <description>During Quarter 1, the first step of the method was coded through IBM Quantum. The website allows code to be run on quantum computers across the globe. The two sections of code allow for the random polarization of qubits.
{ # Importing NumPy, which allows for the use of mathematical functions import numpy as np # Importing standard Qiskit libraries import qiskit as q from qiskit import QuantumCircuit, transpile, Aer, IBMQ from qiskit.</description>
    </item>
    
    <item>
      <title>Meeting 1</title>
      <link>https://tanishkamehta.github.io/researchWebsite/meetings/meeting1/</link>
      <pubDate>Mon, 13 Sep 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/meetings/meeting1/</guid>
      <description>The first meeting took place with Partha Panda, Co-Founder &amp;amp; CEO of Cysiv. As a researcher working in the field of cryptography for over 25 years, he helped identify various limitations of classical cryptography methods.
Key Takeaway: Although classical cryptography systems are extremely difficult to hack into currently, in the next 15 years, as computing power increases, it may become easier to hack into systems, thus decreasing the safety of the transferred information.</description>
    </item>
    
    <item>
      <title>#4: Boise University Summer Cybersecurity Course</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress4/</link>
      <pubDate>Sun, 01 Aug 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress4/</guid>
      <description>Another summer course completed was through Boise University and focused on classical crytpography. Through this course, I learned about the ethics of cybersecurity, password cracking, symmetric and asymmetric cryptography, domain name systems (DNS), data protection, key loggers, converting sites from HTTP to HTTPS, packet sniffers, session attacks, same origin policy, cross-site request forgery, and authentication.</description>
    </item>
    
    <item>
      <title>#3: IBM Year-Long Quantum Computing Course</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress3/</link>
      <pubDate>Wed, 19 May 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress3/</guid>
      <description>Through the online year-long course through IBM, taught by researchers from MIT, I was able to gain a deeper understanding of Quantum Computing; I learned about quantum circuits, Qiskit, Fourier Analyses, and various algorithms.
Quantum Circuits
Through the course, I learned how to compose circuits and apply gates to qubits. Through the IBM Quantum Circuit builder, I was able to view the qubit on the Bloch sphere and see the probability of each state occuring if the qubit were to collapse into a bit upon measurement.</description>
    </item>
    
    <item>
      <title>#2: MIT Beaver Works Year-Long Quantum Software Course</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress2/</link>
      <pubDate>Wed, 31 Mar 2021 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress2/</guid>
      <description>I completed various courses through MIT Beaver Works. The main course I completed focused on Quantum Software. The background math portion of course covered complex numbers, matrices, vectors, bra-ket notation, and tensor notation. The classical computing section included digital information, endianness, digital logic, and computer architecture. The final portion was about software development and covered computer programming in C#, Statically typed languages, unit testing, and programming exercises.</description>
    </item>
    
    <item>
      <title>#1: The Coding School Summer Course</title>
      <link>https://tanishkamehta.github.io/researchWebsite/progress/progress1/</link>
      <pubDate>Tue, 01 Sep 2020 10:58:08 -0400</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/progress/progress1/</guid>
      <description>Through the online summer course at The Coding School, I was able to gain some background knowledge on Quantum Computing. Through this course, the main topics I gained insight on that define quantum computing were superposition, entanglement, quantum gates, and the Double Slit Experiment.
Superposition
Bits are used in classical computing and can have a value of either 0 or 1, like an off and on switch. You canâ€™t balance the switch to be in the middle because it always moves up or down to on or off; likewise, bits can only have one value at once.</description>
    </item>
    
    <item>
      <title> Classical Encryption Methods</title>
      <link>https://tanishkamehta.github.io/researchWebsite/background/previous_classical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/background/previous_classical/</guid>
      <description>The most popular classical cryptosystem, known as Rivest-Shamir-Adleman (RSA), uses asymmetric keys to encrypt and decrypt messages. The message is encoded using an encryption key, sent through a classical communication channel to the receiver, and decoded using a decryption key. Although RSA assumes the channel will be secure, hackers can bypass the security measures and listen to the channel to find the decryption key and decode the message. With classical computing, the presence of hackers is not found until months after the incident, making it futile to find the hacker as the information is already intercepted.</description>
    </item>
    
    <item>
      <title> History of Quantum Computing</title>
      <link>https://tanishkamehta.github.io/researchWebsite/background/history_qc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/background/history_qc/</guid>
      <description>Over time, there have been many advancements to quantum technology. In 1981, Feynman proposed the framework for simulating the evolution of quantum systems, leading to the design of other quantum advancements. In 1994, Shor predicted that as quantum computers became more efficient, they would be able to factorize large prime numbers and break RSA. In 1998, the first quantum algorithm was run. In 2012, quantum transistors and processes for error correction were implemented.</description>
    </item>
    
    <item>
      <title>Current Quantum Encryption Methods</title>
      <link>https://tanishkamehta.github.io/researchWebsite/background/current_qc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/background/current_qc/</guid>
      <description>As quantum power is increasing, quantum cryptography protocols are being created to increase the security and efficiency of cryptography. Two popular quantum cryptography methods are Quantum Key Distribution (QKD) and superdense coding.
Quantum Key Distribution: QKD uses quantum mechanics to distribute a symmetric key. First, the sender (Alice) randomly selects a basis, or basic vector, to encode each qubit, the simplest unit of quantum computing. It can exist in two states at once, unlike classical bits that only have a value of either 1 or 0.</description>
    </item>
    
    <item>
      <title>Step 1: Polarization</title>
      <link>https://tanishkamehta.github.io/researchWebsite/method/step1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/method/step1/</guid>
      <description>Alice will run the code written in Qiskit to randomly polarize a qubit, without knowing its state. To polarize a qubit, two Hadamard gates will be implemented to two qubits in the state |0&amp;gt;, which will produce the |0&amp;gt;, |1&amp;gt;, |+&amp;gt;, or |-&amp;gt; states randomly. Once the Hadamard gates are applied, the four states will have a 25% probability of being produced. Bob will use the same algorithm as Alice to randomly polarize his own qubit.</description>
    </item>
    
    <item>
      <title>Step 2: Transmission</title>
      <link>https://tanishkamehta.github.io/researchWebsite/method/step2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/method/step2/</guid>
      <description>Once Alice and Bob each have two lists of 2048 randomly polarized qubits, they will transfer one list to the other person through the channel. Alice sends one of her lists to Bob and similarly, Bob will send one of his lists to Alice. This will ensure that both Alice and Bob have their own list, as well as the other person&amp;rsquo;s qubit list. By sending the qubits through the channel, rather than the encryption or decryption key, the security of communication is increased.</description>
    </item>
    
    <item>
      <title>Step 3: Comparison</title>
      <link>https://tanishkamehta.github.io/researchWebsite/method/step3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/method/step3/</guid>
      <description>Once Alice and Bob each have their lists, they can compare the polarizations of the qubits to create the final encryption and decryption key. In the list, if the first qubits of both lists are identical, the final key receives a value of 1 for its first value; otherwise, it receives a value of 0. This is repeated 2048 times for each pair of qubits. However, the values cannot be compared to each other directly without collapsing into a bit state.</description>
    </item>
    
    <item>
      <title>Step 4: Encryption</title>
      <link>https://tanishkamehta.github.io/researchWebsite/method/step4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/method/step4/</guid>
      <description>Once Alice and Bob each have their lists, they can compare the polarizations of the qubits to create the final encryption and decryption key. Using the key, Alice will encrypt her message and send it through the channel to Bob, who will use an identical key to decode the message. Since the qubit pairs compared by Alice and Bob were equivilant, the final keys are guaranteed to be identical. Thus, since only the qubit values are being transferred and they cannot be duplicated or intercepted without collapse, the cyrptosystem has increased security.</description>
    </item>
    
    <item>
      <title>| Contact |</title>
      <link>https://tanishkamehta.github.io/researchWebsite/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tanishkamehta.github.io/researchWebsite/contact/</guid>
      <description>Have questions or comments about the research being conducted? If so, please contact the researcher using the form below!
Your Name Email Address An email address is required.  Message   </description>
    </item>
    
  </channel>
</rss>
